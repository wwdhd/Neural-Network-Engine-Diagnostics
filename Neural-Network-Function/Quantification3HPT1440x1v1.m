function [Y,Xf,Af] = Quantification3HPT1440x1v1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jan-2025 12:10:37.
%
% [Y] = Quantification3HPT1440x1v1(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx13 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.452194862982207;-0.75513499798729;0.37204974821634;-0.288826949421024;-8.10390898832512;-1.80211090895129;-2.95149072486076;0.21884068643495;-0.325817737996708;0.521004231763379;-0.638600581544105;-0.0999020136223772;-5.50001194767216];
x1_step1.gain = [1.48749046865026;1.20964901273597;0.244727477988373;0.433376099596001;0.253233552338417;0.591174413296632;0.62431826658486;0.178486461115012;1.04280286502664;0.156848568468262;0.159576756202406;10.0051725621366;0.39082768438509];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.36640556147957947797;0.93703270930610726985;0.078227105586805414927;0.94553149170036987492;1.021344553552711476;-0.87552615336103412069;0.00081295497159755312697;-0.86499719106443540007;1.7927309150514318947;-0.10813578725506126088];
IW1_1 = [0.11262888832639754433 0.13489963940326510361 -0.45979901996126748553 0.32248199294872731402 0.51425105599918274901 -0.32311221688415125985 -0.20681015080888745516 0.23038176139900326533 0.59644903525963433033 0.86540471104105076705 0.34386499768887146544 -0.2017766237778048366 0.45297813345135151675;0.045543561670870785774 0.23281797186417366174 -0.39726987349523906756 0.28509383182197112205 0.39161842154599724175 -0.13783414984923439417 -0.41175571249387354911 -0.42319033465023286888 0.67406908583490376952 0.68813073131191992982 0.30989713184132633428 -0.23115233085478681385 -0.077787869289833333486;-0.046513789565079254051 -0.10255590823010324319 0.32256183486038425556 -0.12682155790224242109 0.32522620766369231271 -0.28231191979233843936 0.27011024137949385393 -0.13705793415229436394 -0.22366612211251246656 -0.58478285974520960444 0.063034494042179853301 0.046452929346726665183 -0.54069357999031564255;-0.29464771002229217522 1.4718826929244133161 1.9979116774069900497 -2.2815040973716467221 1.1007681045422197386 0.34836867263246812376 -0.77167052200315944255 -0.71267972642602128719 -1.2306602645137310059 4.7293971741466620529 0.90729955164585718297 -0.35591160350843725757 1.2559287459460264369;-2.5749361123723772948 0.22729200115080586131 -0.21185461933813037883 -0.071225705787881538056 0.52236218702324710428 1.179283075468250841 -1.8353768950300144436 3.8543150552355864846 1.3259477424220569297 1.3636996600113628908 -0.30363340038929137465 -2.2409872887626374194 -0.22109677221040271999;0.382133326401871809 0.38895130002952793546 0.53775421624988550828 0.21119795339691682656 -0.13079421953480499519 0.015456741361739859825 -0.51048312085862335152 -1.2684593090159137496 0.16215201876909512979 -1.0470970638540006981 -0.56109850455192533669 0.058194396654306534966 -1.4449181397588763964;0.00035081808892670554578 -0.053902912534395323874 0.20772584047914238736 -0.014897576005209111835 0.13694203156744691463 -0.036372302712062119789 0.10668345496917541748 0.059334570552831054913 -0.096549071530160249233 -0.08942148004351076207 -0.017613116937190309574 0.030712423964235548157 -0.54823816878973274935;0.093127128050147084393 0.00094739724026046863437 -0.28389195056045218868 0.2788569534431227237 0.36862335303831883504 0.048283379717234717332 -0.016561782566361711588 0.091060721357068316606 0.34637914915303774643 0.38627441233756637518 -0.016218838991745147121 -0.1158204549474080719 0.88744149104039182774;0.3299749044011324739 0.068855933167147276297 0.090459363033775552765 0.7000698789273903655 0.30987600833949874302 -0.10806574975916508063 -0.13394997810427336504 0.43361520303804823584 0.7689135683828207668 1.5577911437236582337 0.16333444206534156184 -0.16863912140864997791 5.2223887952107181931;-0.0030973949468164332574 -0.037780550075026772539 -0.024083561732710551812 0.0024754100336892418711 -0.58679220571948342844 -0.012935795518009735733 0.064002325135266768807 0.10914780250899087932 -0.016127184023456926643 0.053134620444705904507 0.0086061130411083461983 -0.0040508848868661354731 0.00058611773650766273158];

% Layer 2
b2 = [-0.08216924569024745828;0.16833467948073352338];
LW2_1 = [0.085276407821247041108 0.089026288543752052362 0.13918400492438245952 -0.039644349018736896317 0.0067257370302133637902 0.14173391462621628967 -0.60668575593478712982 -0.53107798820831830788 -0.058196265214919926101 1.9196249220548140535;-0.22644474391477054098 -0.12564832948974022364 0.57601811604304364867 -0.021990486823957468288 0.0024301624174585885647 0.062712204170172036743 -1.8697714485665697381 0.23322564573057766313 0.11012061513224354059 0.66100179346637000233];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.363636363636364;0.363636363636364];
y1_step1.xoffset = [0.5;-6];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end