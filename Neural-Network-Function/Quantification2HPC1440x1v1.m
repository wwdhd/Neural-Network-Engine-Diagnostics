function [Y,Xf,Af] = Quantification2HPC1440x1v1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jan-2025 12:06:35.
%
% [Y] = Quantification2HPC1440x1v1(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx13 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.478245119066102;-0.767979753793275;-0.818613057514181;-0.822058988794958;-1.71701401731793;-0.46311536520068;-1.75800290819691;-0.89473018138119;-0.501004103346609;-0.913903085472723;-1.87669155290809;-0.0999515141114071;-2.86771571900163];
x1_step1.gain = [1.74011263168283;1.25342055245545;0.318565154044357;0.582172938929942;0.705602836470487;0.473326461191867;0.875623886723257;0.290604743232745;1.32397990359124;0.262086606210731;0.228939156572952;10.0034254004094;0.295335628497466];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.9132545964642915237;0.25696674670049202138;-1.3782758494433258178;-0.089116671756280602112;1.2643677529578600804;-0.041632399578231074622;0.0043852291584904456306;2.0303524272807931261;2.7127517205291922231;-0.17161142697783829392];
IW1_1 = [-3.3358605049547271904 -2.3227558075323999631 2.5666572806034304577 -0.91795415733770702182 3.8218673286458511029 -0.22478189500154796554 -1.75874268148143309 1.316030349747895789 -1.1812595342172971247 -1.1430313251756130111 -1.1239110256442954583 -1.6207170597113262911 1.4825887833355502199;-0.025816904447957741975 0.01416427676895480256 0.30032805872889623 -0.09992389032110769731 0.17039484288168993409 0.14698737104825784772 -0.02643314921986198926 0.33198767427000730468 0.13278264430570430044 0.63326996790995426778 0.14794629886949775543 0.058925146181360597841 0.78309861497126220797;-0.047619591335708005841 -0.75494416325413105096 1.3241221254902773019 0.51277372121594655408 0.47673301870619799736 0.16559844833877243597 2.4861686737845931638 -1.4563618698570328647 -0.56249482454959365274 -2.5517120165901832074 -0.18192648262199886955 0.76915875312953008169 1.2530348640648270031;-0.061233229031367325534 0.029416778801290260903 -0.76176867316866170299 -0.80236710994903559513 0.87261621384179921534 0.010428500659776115955 -0.20641506884724125648 -0.021123352778241955008 0.79002137844663811173 0.35742697148522273309 0.096687688733860702173 0.10056231519609057368 -1.7785243075274890234;2.4551153378095573743 -3.3245487926900603171 -1.9252685451190800769 -1.4191798505209851644 3.3369186010839411161 -0.8100915418961782688 -2.5112139015340870785 -4.1761254215427818792 2.3907987942569617346 3.581566062572755893 -4.2502525401247970294 4.9351499664719389315 -3.7367101670163118676;-0.038180953890922610106 0.012486661082464696124 -0.095415224350243577067 -0.057772140046064693331 0.21655368077777439884 0.12471561637313477444 0.15133727101781477287 0.010587698091041587017 0.079436281897381402772 0.037488039611973555942 0.069201676641754888974 0.097033856942427582082 0.98785824676848577042;-0.003415477626666803615 0.0041637014628368301805 0.026879490094005000639 -0.0089569410236303905609 0.016184133108379513549 0.022148079999050555161 -0.0023877178065672931273 0.040938178884988407624 0.013131985268920726498 0.056113685115354042243 0.011756805475179380599 0.003095340843419420486 -0.33498949802931654585;0.54515459534559773669 -1.4822364776079444137 0.23967173220742607476 0.27439946771903023226 0.2301838012057018934 0.17983930618149346348 -0.88200977837932603709 -2.4095180720682169984 1.4604312340301186524 -0.57139650576062905873 2.4149277476160246891 1.2264763891021817077 -0.11615534984943767793;0.10813344016412509974 -2.0528638390601008368 1.3958491193224655813 1.9920002893252417575 4.5199116306942199728 -2.7277706184110601662 0.75183282634062065242 2.9324479893040935607 0.12540756347387638225 -0.97956209516222103595 -3.3452085443287606914 4.3768732099783163036 -1.400910689533832576;-0.032102476846546199041 -0.0097948498344969676249 -0.23299045711108129497 -0.033564106503354562694 0.18197815732528116461 0.072576629457952096525 0.21064729701944845397 -0.13541419899392731496 0.042534180853892045171 -0.12605961703212043012 0.08774638983121074709 0.12525489171956580292 0.65746879825620707649];

% Layer 2
b2 = [0.25782277444059936711;0.23211241918379663107];
LW2_1 = [0.026537730316499318767 -0.68704663356073181202 -0.045071828354870661915 0.13727101557268781007 -0.017492640083253140765 -1.4962249903704247789 2.9266368028186713346 -0.026121100810555273469 0.021030769809501342199 1.5335143915831297434;0.03213459809161234304 -0.54209371890647006786 -0.073171743744739989324 0.17195075612332927362 -0.01798442346372690695 -1.1279698137108093992 -1.6437591211725246509 -0.034979142015141739819 0.016036043450316100206 1.3840255526718316936];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.363636363636364;0.363636363636364];
y1_step1.xoffset = [-6;-6];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
