function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 03-Dec-2024 15:53:28.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x1 = Qx8 matrix, input #1
% and returns:
%   y1 = Qx1 matrix, output #1
% where Q is the number of samples.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-45; -5; -2.5; 20130; 0.484; 968; 8.9; 604];
x1_step1.gain = [0.025; 0.4; 0.666666666666667; 0.000122466474802523; 5.52486187845304; 0.0833333333333333; 0.355239786856128; 0.04];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.3473910551804584301; 0.24175037970162860379; -0.70806494579843737291; -4.100111852809265045; -0.75126835131828095804; 0.60264507574039072324; -1.7782981607783394651; -1.3046300631225777877; -3.9722519900029116258; -0.89588879995137438161];
IW1_1 = [-1.9215456470046829995, 0.83045127479525537861, 0.19852633074135661584, 1.6020532344186448892, 1.2757977604321857346, -1.1886665153226896319, 0.79341582335070393039, -1.7004338638424458807;
         -0.48772642473964245013, 0.099977354684861352574, 1.0251580030139402222, -3.3672149423605217677, 2.602468945559493374, -0.6140303511219942223, 0.95088834511522501991, 2.8307146468802750761;
         1.5516577483972415763, 1.0297164504097691129, 0.45327926839857235475, 0.10338642437952591524, -0.073866666143515793963, -1.2049003498668280354, 0.47174262570248809423, 1.6054634910836371731;
         3.1112993812572753427, 4.2520723867967662457, 4.8028667944148049074, 2.2504820092451320868, 6.2117405443226578754, -0.90256925558178058289, 5.303653730533953059, 9.354143082685773436;
         2.2236159105419668336, 0.53969339339740096673, 4.0376295875517644873, 1.4986766607003965124, 1.9022504036512570824, 1.5362636419508219898, 4.4175715495689926726, 3.5976275633975127732;
         1.8688690723439846941, -0.066855985151743069217, 0.91687913878020499414, 1.9738773832055780399, 0.38180856901015824967, -0.097576634377504856133, 1.1166364221725062489, 3.166549111148587059;
         -0.15610021699174222998, -0.81086187450399827004, -0.74391076535890643395, -0.66851191061618497891, 0.91790931835950673179, 1.1658449262199341856, -0.14756173366544522718, 0.45276034336520021295;
         -0.5914699631702775573, 0.74288592654548213368, -0.30158989400984415052, -0.79433690192744965675, -0.70573915377362095303, -1.6402174685468993154, -0.56498851499366931073, 1.859775985959087663;
         0.21865337193827549811, -0.85274365519819583792, -0.56746968665095587347, -0.020023621991021336303, -0.05308398591553472462, 1.7480224475840933085, -1.4376807815027883297, 0.3068056590372558734;
         1.2672942236748681033, 0.82912994242768600639, 1.9309021860706621077, 1.2703022111270272365, -0.31585465817142976963, 1.0776167954549555894, 0.20814669489949658154, -2.0194199086639450513];

% Layer 2
b2 = -0.59721842452292706049;
LW2_1 = [-0.50797633096021366228, -3.5911974449695787115, 1.5137257508385328908, 1.0660278867124488578, 1.1942532008190580584, 2.6881909839254283234, -0.48394913911556425301, -1.4279445217286974579, 0.62238796448377664561, -1.6979569176393884966];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Ensure x1 is a matrix and has correct dimensions
if size(x1, 2) ~= 8
    error('Input x1 must be a Qx8 matrix, where Q is the number of samples.');
end

% Dimensions
Q = size(x1, 1); % number of samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1, x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1, 1, Q) + IW1_1 * xp1);

% Layer 2
a2 = repmat(b2, 1, Q) + LW2_1 * a1;

% Output 1
y1 = mapminmax_reverse(a2, y1_step1);
y1 = y1';

end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x, settings)
y = bsxfun(@minus, x, settings.xoffset);
y = bsxfun(@times, y, settings.gain);
y = bsxfun(@plus, y, settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n, ~)
a = 2 ./ (1 + exp(-2 * n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y, settings)
x = bsxfun(@minus, y, settings.ymin);
x = bsxfun(@rdivide, x, settings.gain);
x = bsxfun(@plus, x, settings.xoffset);
end