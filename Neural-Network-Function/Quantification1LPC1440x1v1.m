function [Y,Xf,Af] = Quantification1LPC1440x1v1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 21-Jan-2025 20:56:16.
%
% [Y] = Quantification1IPC1440x1v1(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx13 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx2 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.479849370439456;-0.772251187979617;-8.93898782910051;-3.21160476338192;-3.61249118305313;-1.58869438841033;-3.64916026795756;-0.648506742272126;-3.59405443833867;-0.554575930321893;-3.42536360838103;-0.0998883717876931;0.106361798818266];
x1_step1.gain = [1.62756583159472;1.21718850952377;0.229223697692835;0.404616886946328;0.425596568378672;0.551322734342229;0.442841503459205;0.695036115867686;0.394959477114651;0.674112338709327;0.29236313649867;10.0118765421268;0.935303540597583];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.5039361221678384517;-0.30398791638195693521;0.46624179226335216164;-1.494260203211309479;-0.021514680970412695948;0.28844060148870748206;0.28382449986916841178;0.78540166509098907621;1.0871459215659438069;1.5606785857177918331];
IW1_1 = [0.04064094450616578813 -0.43337929892751525518 -0.057888115491818187275 0.3817923903987495704 -0.22450327052809787576 0.20189243602985298964 -1.0796424319013664395 -0.041118983298204819787 0.29653948414502190323 -0.32642327213683808296 0.047855656597982215716 -0.031772347840689066367 0.33028523030511769409;0.065277223105036794037 -0.206617808722884988 -0.15311353926176363149 0.1750286882787547571 -0.23903898005564505613 0.099675010955554366188 -0.63089399652811262165 -0.048498455421098193852 0.26421630025047371237 -0.083014808039881621271 -0.034570743902194001063 0.0057846171901752008182 0.11774772383868647996;-0.013897288029014232685 0.081245641310319111073 -0.32725372108543449023 -0.22743150746701989995 -0.0097214368166288183531 -0.11012482576976638515 0.12512492661843532815 -0.073850302543004509026 -0.23536979736205099201 -0.012266585840789899498 -0.0024144080683937835241 -0.021964008775806974361 -1.527140870899665881;0.028044313173469299222 0.087656718210253101176 -0.47819170035250718742 -0.19698641816425907503 -0.21284070148157069324 -0.42410228590872534049 0.15666214343857659541 -0.2324286910299036002 -0.62687409302951246914 -0.049518308854326655022 -0.061869526585646102135 -0.047863785959578381002 -2.8322925350115397691;-0.013747377924825601378 0.1286239990708073766 -0.36864934249898750895 -0.16108942837526049607 -0.016479296160997299742 -0.1152434998182803455 0.27901056073130009461 0.0030522311900240649274 -0.21634756861503651182 0.080174336811677210379 0.016620653196681128838 -0.031651907107921387063 0.1054479127941494454;-0.81129260755190979459 0.72101101559282276821 -0.067663086328930283075 -1.0055736609016530103 -0.73554140608315254912 0.38277337271564132459 0.27928018859950687336 0.81161958378825860283 -0.31016659867798995753 1.4653091624555507622 -0.42661989954667439706 0.12531825344007646583 0.13120968938753638233;0.1246593769531892798 -0.27876055591165738168 0.38341807198336680385 0.45169517000611519864 0.42103754143292199119 0.87598128682515663535 0.33672149244259630407 -0.6482531582513436641 0.65447467443060314274 -0.59304932105878815918 -0.79656952997442065367 0.5002929762577317252 -0.03956428973717920905;-0.30511860880221985948 -0.49634796352675425446 0.67724825222234918964 -0.055315320401222750624 0.15278958410492768372 0.91460684857494356503 0.28976037872309656773 0.73683244464032504606 -0.43673716740601076225 -0.80996805768124036096 0.71502963108785522195 0.056600007583548966883 -0.4286188151208663033;0.031381273585322069786 0.057386444620380505643 -0.17405397525646407186 -0.24567842572139655943 -0.39247473102875979345 -0.042393814572248333938 -0.26711950230571374076 -0.29669639498157129864 0.83423766237433460979 0.69925651950027845061 0.15912674644955818182 -0.33423978451301283865 -0.37337786147045876062;0.074462666479772204875 -0.30271844849301793312 0.4592887002215149117 0.047976675717130726206 -0.76474002558392339957 0.086557191061812893684 0.15002304184434930856 0.010861697668969952368 -0.038101533321749952998 -0.10195997294071723616 -0.17544334617440182633 -0.02813958095546166549 -0.2108266714566807698];

% Layer 2
b2 = [-0.22722433800223651446;-0.37775138708869759885];
LW2_1 = [-0.42365498950543634127 -0.8573386978008138426 -0.065661084233372940533 -0.029954657186122723989 -1.5067547605669364685 -0.043150492669996300121 -0.052943530645363771903 -0.029101877990341761676 0.18685000831142389854 0.29412268828238158358;0.13365785770114538278 0.14165976264737020762 0.92740906356629360108 0.3506335987620516903 -0.43332071607567734794 0.039964767700884938628 -0.028271426541843575758 -0.058310414098690352414 -0.17699542929734643493 0.37869245569526710504];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.363636363636364;0.363636363636364];
y1_step1.xoffset = [-6;-6];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
